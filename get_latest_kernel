#!/usr/bin/env perl

use warnings;
use strict;

use feature qw/switch/;
use Mojo::UserAgent;
use Mojo::DOM;
use List::Util qw/any/;
use POSIX qw/setsid/;
use Getopt::Long qw(:config gnu_compat no_permute no_getopt_compat pass_through);
use lib::abs 'lib';
use Linux::Kernel::Latest;
use Module::Loader;
use Try::Tiny;

BEGIN {
   eval {
      require Smart::Comments;
      Smart::Comments->import();
   }
}

my %config;
$config{working_dir} = '.';
$config{daemon} = 0;
$config{minutes} = 10;
$config{plugins} = [];

GetOptions(
   'daemon|d!'       => \$config{daemon},
   'minutes|m=i'     => \$config{minutes},
   'dir=s'           => \$config{working_dir},
   'load-plugins=s@' => \$config{plugins},
) or die "Wrong command line arguments.\n";
$config{plugins} = [ split(/,/, join(',', @{$config{plugins}})) ];

unless (-d $config{working_dir} && -r _ && -x _) {
   die "Can't open directory $config{working_dir}\n"
}

my $loader  = Module::Loader->new(max_depth => 1);
my @plugins;
my %pmap = map {lc(substr($_, rindex($_, ':') + 1)), $_} $loader->search('Linux::Kernel::Plugin');
foreach my $p (@{$config{plugins}}) {
   if (any {$p eq $_} keys %pmap) {
      ### LOADING PLUGIN: $p
      $loader->load($pmap{$p});
      push @plugins, $pmap{$p}->process_options(\%config);
   } else {
      die "There is no plugin: $p\n"
   }
}

@plugins = sort
   {
      die ("Can't use plugin " . (ref $a) . " and " . (ref $b) . " combined.\n")
         if $a->priority == $b->priority;
      $a->priority <=> $b->priority
   } @plugins;

if (@ARGV) {
   die "Unknown command line arguments: " . join(', ', @ARGV) . "\n"
}


### CONFIGURATION: %config

if ($config{daemon}) {
   my $pid = fork();
   die "can't fork: $!"
      unless defined $pid;
   if ($pid) {
      print "$pid\n";
      exit 0;
   }
   setsid();
   open (STDIN,  '</dev/null');
   open (STDOUT, '>/dev/null');
   open (STDERR, '>&STDOUT');
}


my $ua = Mojo::UserAgent->new(max_redirects => 3);

CHECK:
my $link = latest_kernel($ua);
if ($link) {
   my %opts = (link => $link, ua => $ua);
   foreach (@plugins) {
      try { # TODO:
         $_->action(\%opts)
      } catch {
         when (/^FAIL:/) { die $_ }
         default { last }
      }
   }
}

if ($config{daemon}) {
   sleep $config{minutes} * 60;
   goto CHECK
}

